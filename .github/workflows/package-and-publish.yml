name: Package and Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version (e.g., 1.0.0)'
        required: true
        type: string

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

jobs:
  publish-nuget:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # Extract version from tag (remove 'v' prefix)
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Create NuGet package
      run: |
        dotnet pack AspireMcpServer/AspireMcpServer.csproj \
          --configuration Release \
          --no-build \
          --output ./packages \
          /p:PackageVersion=${{ steps.get_version.outputs.VERSION }} \
          /p:IncludeSymbols=true \
          /p:SymbolPackageFormat=snupkg
          
    - name: Publish to NuGet.org
      run: |
        dotnet nuget push ./packages/*.nupkg \
          --source https://api.nuget.org/v3/index.json \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --skip-duplicate
      if: env.NUGET_API_KEY != ''
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        
    - name: Publish to GitHub Packages
      run: |
        dotnet nuget push ./packages/*.nupkg \
          --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --skip-duplicate
          
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg
        retention-days: 90

  publish-chocolatey:
    runs-on: windows-latest
    needs: publish-nuget
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: get_version
      shell: powershell
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          echo "VERSION=${{ github.event.inputs.version }}" >> $env:GITHUB_OUTPUT
        } else {
          $version = "${{ github.ref }}" -replace "refs/tags/v", ""
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        }
        
    - name: Create Chocolatey package
      shell: powershell
      run: |
        $packageDir = "chocolatey-package"
        New-Item -ItemType Directory -Path $packageDir -Force
        
        # Create nuspec file
        @"
        <?xml version="1.0" encoding="utf-8"?>
        <package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
          <metadata>
            <id>aspire-mcp-server</id>
            <version>${{ steps.get_version.outputs.VERSION }}</version>
            <packageSourceUrl>https://github.com/${{ github.repository }}</packageSourceUrl>
            <owners>${{ github.repository_owner }}</owners>
            <title>AspireMcpServer</title>
            <authors>${{ github.repository_owner }}</authors>
            <projectUrl>https://github.com/${{ github.repository }}</projectUrl>
            <iconUrl>https://raw.githubusercontent.com/${{ github.repository }}/main/icon.png</iconUrl>
            <copyright>Copyright Â© ${{ github.repository_owner }} $(Get-Date -Format yyyy)</copyright>
            <licenseUrl>https://github.com/${{ github.repository }}/blob/main/LICENSE</licenseUrl>
            <requireLicenseAcceptance>false</requireLicenseAcceptance>
            <projectSourceUrl>https://github.com/${{ github.repository }}</projectSourceUrl>
            <docsUrl>https://github.com/${{ github.repository }}/blob/main/README.md</docsUrl>
            <bugTrackerUrl>https://github.com/${{ github.repository }}/issues</bugTrackerUrl>
            <tags>aspire dotnet mcp server cli cloud-native microservices</tags>
            <summary>Comprehensive .NET Aspire MCP Server with 70+ enterprise tools</summary>
            <description>
        AspireMcpServer is a comprehensive Model Context Protocol (MCP) server that exposes .NET Aspire CLI commands as MCP tools. 
        Built with the Microsoft ModelContextProtocol library and optimized for AOT compilation with minimal footprint.
        
        Features:
        - 70+ comprehensive tools across all categories
        - Enhanced template management with custom template creation
        - Advanced resource monitoring with real-time metrics and alerting
        - Multi-cloud deployment support for Azure, AWS, GCP
        - Container orchestration with Kubernetes and Docker Swarm
        - DevOps and CI/CD integration with pipeline generation
        - AOT compilation for optimal performance and minimal footprint
            </description>
            <releaseNotes>https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.VERSION }}</releaseNotes>
          </metadata>
          <files>
            <file src="tools\**" target="tools" />
          </files>
        </package>
        "@ | Out-File -FilePath "$packageDir\aspire-mcp-server.nuspec" -Encoding UTF8
        
        # Create tools directory and install script
        New-Item -ItemType Directory -Path "$packageDir\tools" -Force
        
        @"
        `$ErrorActionPreference = 'Stop'
        `$toolsDir = "`$(Split-Path -parent `$MyInvocation.MyCommand.Definition)"
        `$packageName = 'aspire-mcp-server'
        
        `$packageArgs = @{
          packageName   = `$packageName
          unzipLocation = `$toolsDir
          fileType      = 'EXE'
          url64bit      = 'https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/AspireMcpServer-win-x64.exe'
          softwareName  = 'AspireMcpServer*'
          checksum64    = ''
          checksumType64= 'sha256'
          silentArgs    = '/S'
          validExitCodes= @(0)
        }
        
        Install-ChocolateyPackage @packageArgs
        "@ | Out-File -FilePath "$packageDir\tools\chocolateyinstall.ps1" -Encoding UTF8
        
    - name: Pack Chocolatey package
      shell: powershell
      run: |
        cd chocolatey-package
        choco pack
        
    - name: Publish to Chocolatey
      shell: powershell
      run: |
        if ("${{ secrets.CHOCOLATEY_API_KEY }}" -ne "") {
          cd chocolatey-package
          choco push aspire-mcp-server.${{ steps.get_version.outputs.VERSION }}.nupkg --source https://push.chocolatey.org/ --api-key ${{ secrets.CHOCOLATEY_API_KEY }}
        }
      env:
        CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}

  publish-homebrew:
    runs-on: ubuntu-latest
    needs: publish-nuget
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version and checksums
      id: get_info
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/v}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Get checksums from release assets
        MACOS_X64_SHA=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION" | jq -r '.assets[] | select(.name == "AspireMcpServer-osx-x64") | .browser_download_url' | xargs curl -sL | sha256sum | cut -d' ' -f1)
        MACOS_ARM64_SHA=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION" | jq -r '.assets[] | select(.name == "AspireMcpServer-osx-arm64") | .browser_download_url' | xargs curl -sL | sha256sum | cut -d' ' -f1)
        
        echo "MACOS_X64_SHA=$MACOS_X64_SHA" >> $GITHUB_OUTPUT
        echo "MACOS_ARM64_SHA=$MACOS_ARM64_SHA" >> $GITHUB_OUTPUT
        
    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v3
      with:
        formula-name: aspire-mcp-server
        formula-path: Formula/aspire-mcp-server.rb
        homebrew-tap: ${{ github.repository_owner }}/homebrew-tap
        download-url: https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_info.outputs.VERSION }}/AspireMcpServer-osx-x64
        commit-message: |
          aspire-mcp-server ${{ steps.get_info.outputs.VERSION }}
          
          Updated AspireMcpServer to version ${{ steps.get_info.outputs.VERSION }}
      env:
        COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
